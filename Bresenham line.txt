BRESENHAM LINE  #include <iostream>
#include <GL/glut.h>
#include <cmath> // Include <cmath> for std::max and std::abs

using namespace std;

void myInit(){
    glClearColor(1,0,0.5,1);
    glViewport(0,0,800,800);
    gluOrtho2D(0,800,0,800);
}

void line(int x1, int y1, int x2, int y2){
    glBegin(GL_LINES); // Change GL_LINE_LOOP to GL_LINES
        glVertex2i(x1, y1);
        glVertex2i(x2, y2);
    glEnd();
    glFlush();
}

void axis(){
    glColor3f(1,1,1);
    line(0,400,800,400);
    line(400,0,400,800);
}

void setpixel(int x, int y) {
    glBegin(GL_POINTS);
        glVertex2i(x, y);
    glEnd();
}

void BresenhamLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int incx = (x2 > x1) ? 1 : -1;
    int incy = (y2 > y1) ? 1 : -1;

    int x = x1, y = y1;

    if (dx > dy) {
        int p = 2 * dy - dx;
        while (x != x2) {
            setpixel(x, y);
            x += incx;
            if (p >= 0) {
                y += incy;
                p -= 2 * dx;
            }
            p += 2 * dy;
        }
    } else {
        int p = 2 * dx - dy;
        while (y != y2) {
            setpixel(x, y);
            y += incy;
            if (p >= 0) {
                x += incx;
                p -= 2 * dy;
            }
            p += 2 * dx;
        }
    }
    setpixel(x, y);
}

void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    glLineWidth(3);
    glColor3f(1,1,1);
    axis();

    // Draw line using DDA algorithm
    glColor3f(1.0, 1.0, 1.0); // Set color to white
    BresenhamLine(100, 100, 700, 700); 

    glFlush();
}

int main(int c, char **v){
    glutInit(&c, v);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutInitWindowPosition(800,150);
    glutInitWindowSize(800,800);
    glutCreateWindow("BRESENHAM LINE");
    myInit();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}